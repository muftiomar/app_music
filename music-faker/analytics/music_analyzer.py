#!/usr/bin/env python3
"""
Script d'analyse des donn√©es musicales stock√©es dans HDFS
"""
import subprocess
import json
import pandas as pd
from collections import defaultdict, Counter
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

def list_hdfs_files(hdfs_path="/music_events"):
    """Liste tous les fichiers JSONL dans HDFS"""
    try:
        cmd = f"docker exec namenode hdfs dfs -ls -R {hdfs_path}"
        result = subprocess.run(cmd.split(), capture_output=True, text=True)
        if result.returncode == 0:
            files = []
            for line in result.stdout.split('\n'):
                if line.strip() and line.startswith('-') and '.jsonl' in line and 'test.json' not in line:
                    # Extraire le chemin du fichier (derni√®re colonne)
                    parts = line.split()
                    if len(parts) >= 8:
                        file_path = parts[-1]
                        files.append(file_path)
            return files
        else:
            print(f"Erreur lors de la liste des fichiers: {result.stderr}")
            return []
    except Exception as e:
        print(f"Erreur: {e}")
        return []

def read_hdfs_file(hdfs_file_path):
    """Lit un fichier JSONL depuis HDFS et retourne les √©v√©nements"""
    try:
        cmd = f"docker exec namenode hdfs dfs -cat {hdfs_file_path}"
        result = subprocess.run(cmd.split(), capture_output=True, text=True)
        if result.returncode == 0:
            events = []
            for line in result.stdout.strip().split('\n'):
                if line.strip():
                    try:
                        event = json.loads(line)
                        events.append(event)
                    except json.JSONDecodeError:
                        continue
            return events
        else:
            print(f"Erreur lecture {hdfs_file_path}: {result.stderr}")
            return []
    except Exception as e:
        print(f"Erreur: {e}")
        return []

def load_all_events():
    """Charge tous les √©v√©nements depuis HDFS"""
    files = list_hdfs_files()
    print(f"üìÅ Trouv√© {len(files)} fichiers dans HDFS:")
    for f in files:
        print(f"  - {f}")
    
    all_events = []
    for file_path in files:
        print(f"üìñ Lecture de {file_path}...")
        events = read_hdfs_file(file_path)
        all_events.extend(events)
        print(f"   ‚úÖ {len(events)} √©v√©nements charg√©s")
    
    print(f"\nüìä Total: {len(all_events)} √©v√©nements musicaux")
    return all_events

def analyze_events(events):
    """Analyse les √©v√©nements musicaux"""
    if not events:
        print("Aucun √©v√©nement √† analyser")
        return
    
    print("\n" + "="*60)
    print("üìà ANALYSE DES DONN√âES MUSICALES")
    print("="*60)
    
    # Conversion en DataFrame pour faciliter l'analyse
    df = pd.DataFrame(events)
    
    # Statistiques g√©n√©rales
    print(f"\nüéµ STATISTIQUES G√âN√âRALES:")
    print(f"   ‚Ä¢ Nombre total d'√©v√©nements: {len(df)}")
    print(f"   ‚Ä¢ Nombre d'utilisateurs uniques: {df['user'].nunique()}")
    print(f"   ‚Ä¢ Nombre d'artistes uniques: {df['artist'].nunique()}")
    print(f"   ‚Ä¢ Nombre de pistes uniques: {df['track'].nunique()}")
    print(f"   ‚Ä¢ P√©riode: {df['timestamp'].min()} √† {df['timestamp'].max()}")
    
    # Top genres
    print(f"\nüéº TOP 10 GENRES:")
    top_genres = df['genre'].value_counts().head(10)
    for genre, count in top_genres.items():
        print(f"   ‚Ä¢ {genre}: {count} √©coutes")
    
    # Top plateformes
    print(f"\nüì± TOP 5 PLATEFORMES:")
    top_platforms = df['platform'].value_counts().head(5)
    for platform, count in top_platforms.items():
        print(f"   ‚Ä¢ {platform}: {count} √©coutes")
    
    # Top actions
    print(f"\nüé¨ TOP 5 ACTIONS:")
    top_actions = df['action'].value_counts().head(5)
    for action, count in top_actions.items():
        print(f"   ‚Ä¢ {action}: {count} fois")
    
    # Top devices
    print(f"\nüìü TOP 5 APPAREILS:")
    top_devices = df['device'].value_counts().head(5)
    for device, count in top_devices.items():
        print(f"   ‚Ä¢ {device}: {count} utilisations")
    
    # Dur√©e moyenne
    print(f"\n‚è±Ô∏è  DUR√âES:")
    print(f"   ‚Ä¢ Dur√©e moyenne: {df['duration'].mean():.1f} secondes")
    print(f"   ‚Ä¢ Dur√©e m√©diane: {df['duration'].median():.1f} secondes")
    print(f"   ‚Ä¢ Dur√©e min/max: {df['duration'].min()}s / {df['duration'].max()}s")
    
    # Top pays
    print(f"\nüåç TOP 10 PAYS:")
    top_countries = df['country'].value_counts().head(10)
    for country, count in top_countries.items():
        print(f"   ‚Ä¢ {country}: {count} √©coutes")
    
    return df

def create_visualizations(df):
    """Cr√©e des visualisations des donn√©es"""
    if df.empty:
        return
    
    print(f"\nüìä Cr√©ation des graphiques...")
    
    # Configuration du style
    plt.style.use('seaborn-v0_8')
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle('üéµ Analyse des Donn√©es Musicales - HDFS', fontsize=16, fontweight='bold')
    
    # Graphique 1: Top genres
    top_genres = df['genre'].value_counts().head(8)
    axes[0,0].bar(range(len(top_genres)), top_genres.values, color='skyblue')
    axes[0,0].set_title('üéº Top 8 Genres Musicaux')
    axes[0,0].set_xticks(range(len(top_genres)))
    axes[0,0].set_xticklabels(top_genres.index, rotation=45, ha='right')
    axes[0,0].set_ylabel('Nombre d\'√©coutes')
    
    # Graphique 2: Plateformes
    top_platforms = df['platform'].value_counts().head(6)
    axes[0,1].pie(top_platforms.values, labels=top_platforms.index, autopct='%1.1f%%', startangle=90)
    axes[0,1].set_title('üì± R√©partition par Plateforme')
    
    # Graphique 3: Actions
    top_actions = df['action'].value_counts().head(6)
    axes[1,0].barh(range(len(top_actions)), top_actions.values, color='lightcoral')
    axes[1,0].set_title('üé¨ Actions les Plus Fr√©quentes')
    axes[1,0].set_yticks(range(len(top_actions)))
    axes[1,0].set_yticklabels(top_actions.index)
    axes[1,0].set_xlabel('Nombre d\'occurrences')
    
    # Graphique 4: Dur√©es
    axes[1,1].hist(df['duration'], bins=20, color='lightgreen', alpha=0.7, edgecolor='black')
    axes[1,1].set_title('‚è±Ô∏è Distribution des Dur√©es')
    axes[1,1].set_xlabel('Dur√©e (secondes)')
    axes[1,1].set_ylabel('Fr√©quence')
    axes[1,1].axvline(df['duration'].mean(), color='red', linestyle='--', 
                     label=f'Moyenne: {df["duration"].mean():.1f}s')
    axes[1,1].legend()
    
    plt.tight_layout()
    
    # Sauvegarder le graphique
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f'music_analytics_{timestamp}.png'
    plt.savefig(filename, dpi=300, bbox_inches='tight')
    print(f"   ‚úÖ Graphiques sauvegard√©s: {filename}")
    
    # Afficher
    plt.show()

def export_summary_to_csv(df):
    """Exporte un r√©sum√© en CSV"""
    if df.empty:
        return
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # R√©sum√© par genre
    genre_summary = df.groupby('genre').agg({
        'duration': ['count', 'mean', 'sum'],
        'user': 'nunique',
        'artist': 'nunique'
    }).round(2)
    genre_summary.columns = ['Total_Ecoutes', 'Duree_Moyenne', 'Duree_Totale', 'Utilisateurs_Uniques', 'Artistes_Uniques']
    genre_summary.to_csv(f'music_stats_{timestamp}_genres.csv')
    
    # R√©sum√© par plateforme
    platform_summary = df.groupby('platform').agg({
        'duration': ['count', 'mean'],
        'user': 'nunique'
    }).round(2)
    platform_summary.columns = ['Total_Ecoutes', 'Duree_Moyenne', 'Utilisateurs_Uniques']
    platform_summary.to_csv(f'music_stats_{timestamp}_platforms.csv')
    
    # R√©sum√© par pays
    country_summary = df.groupby('country').agg({
        'duration': ['count', 'sum'],
        'user': 'nunique'
    }).round(2)
    country_summary.columns = ['Total_Ecoutes', 'Duree_Totale', 'Utilisateurs_Uniques']
    country_summary.to_csv(f'music_stats_{timestamp}_countries.csv')
    
    # R√©sum√© par action
    action_summary = df.groupby('action').size().reset_index(name='Count')
    action_summary.to_csv(f'music_stats_{timestamp}_events.csv', index=False)
    
    print(f"\nüìÅ Fichiers CSV export√©s:")
    print(f"   ‚Ä¢ music_stats_{timestamp}_genres.csv")
    print(f"   ‚Ä¢ music_stats_{timestamp}_platforms.csv") 
    print(f"   ‚Ä¢ music_stats_{timestamp}_countries.csv")
    print(f"   ‚Ä¢ music_stats_{timestamp}_events.csv")

def main():
    print("üéµ ANALYSEUR DE DONN√âES MUSICALES HDFS")
    print("="*50)
    
    # Charger les donn√©es
    events = load_all_events()
    
    if not events:
        print("‚ùå Aucune donn√©e trouv√©e dans HDFS")
        return
    
    # Analyser
    df = analyze_events(events)
    
    # Exporter les r√©sum√©s
    export_summary_to_csv(df)
    
    # Cr√©er les visualisations
    try:
        create_visualizations(df)
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de la cr√©ation des graphiques: {e}")
    
    print(f"\n‚ú® Analyse termin√©e!")

if __name__ == "__main__":
    main()
